@use '../vars' as vars
@use 'sass:map'

@mixin screen-helper-classes($threshold, $size)
    .d-#{$threshold}-#{$size},
    .d-#{$threshold}-#{$size}--block
        display: block !important
    .d-#{$threshold}-#{$size}--inline
        display: inline !important
    .d-#{$threshold}-#{$size}--flex
        display: flex !important
    .d-#{$threshold}-#{$size}--inline-flex
        display: inline-flex !important
    .d-#{$threshold}-#{$size}--hidden
        display: none !important

@mixin container($m, $size)
    margin: 0 auto
    #{$m}-width: var(--screen-#{$size})
    padding-left: var(--container--gutter)
    padding-right: var(--container--gutter)
    width: -webkit-fill-available

@each $size in map.keys(vars.$screen-sizes)
    // container
    $mm: min max
    @each $m in $mm
        .container--#{$m}-#{$size}
            @include container($m, $size)

    // screen-width-helper-classes
    $width: map.get(vars.$screen-sizes, $size)
    // -- only
    @if $size == xs
        @media (max-width: $width)
            @include screen-helper-classes(only, $size)
    @else if $size == xl
        @media (min-width: $width)
            @include screen-helper-classes(only, $size)
    @else if $size == sm
        @media (min-width: $width) and (max-width: map.get(vars.$screen-sizes, md))
            @include screen-helper-classes(only, $size)
    @else if $size == md
        @media (min-width: $width) and (max-width: map.get(vars.$screen-sizes, lg))
            @include screen-helper-classes(only, $size)
    @else if $size == lg
        @media (min-width: $width) and (max-width: map.get(vars.$screen-sizes, xl))
            @include screen-helper-classes(only, $size)
    // -- above
    @media (min-width: $width)
        @include screen-helper-classes(above, $size)
    // -- below
    @media (max-width: $width)
        @include screen-helper-classes(below, $size)

.d-none
    display: none

.container
    --container--gutter: calc(var(--space) * 2)
.container
     @include container(max, lg)

